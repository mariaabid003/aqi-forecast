name: Run AQI Forecasting Pipeline

on:
  workflow_dispatch:  # manual trigger
  schedule:
    # Runs at 12:00 AM and 12:00 PM UTC every day
    - cron: '0 */6 * * *'

jobs:
  run-pipeline:
    runs-on: ubuntu-latest

    steps:
      # -------------------------
      # 1. Checkout repository
      # -------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # -------------------------
      # 2. Set up Python 3.10
      # -------------------------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # -------------------------
      # 3. Cache pip dependencies
      # -------------------------
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # -------------------------
      # 4. Install dependencies
      # -------------------------
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Avoid heavy packages like Airflow in CI
          grep -v apache-airflow requirements.txt > requirements-ci.txt
          pip install -r requirements-ci.txt
          # ✅ Ensure Kafka & Hopsworks SDK support
          pip install "hopsworks[python]" || pip install confluent-kafka

      # -------------------------
      # 5. Run Feature Backfill
      # -------------------------
      - name: Run Feature Backfill
        env:
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
          AQICN_TOKEN: ${{ secrets.AQICN_TOKEN }}
          aqi_forecast_api_key: ${{ secrets.aqi_forecast_api_key }}
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: python features/backfill.py

      # -------------------------
      # 6. Train Sklearn Model (Primary)
      # -------------------------
      - name: Train Sklearn Model
        env:
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
          AQICN_TOKEN: ${{ secrets.AQICN_TOKEN }}
          aqi_forecast_api_key: ${{ secrets.aqi_forecast_api_key }}
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: python trainings/train_sklearn.py

      # -------------------------
      # 7. Train TensorFlow Model (Secondary)
      # -------------------------
      - name: Train TensorFlow Model
        env:
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
          AQICN_TOKEN: ${{ secrets.AQICN_TOKEN }}
          aqi_forecast_api_key: ${{ secrets.aqi_forecast_api_key }}
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: python trainings/train_tf.py

      # -------------------------
      # 8. Evaluate Models
      # -------------------------
      - name: Evaluate Models
        env:
          aqi_forecast_api_key: ${{ secrets.aqi_forecast_api_key }}
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: python trainings/evaluate.py

      # -------------------------
      # 9. Generate 3-Day Forecast (and store CSV)
      # -------------------------
      - name: Generate 3-Day Forecast
        env:
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
          AQICN_TOKEN: ${{ secrets.AQICN_TOKEN }}
          aqi_forecast_api_key: ${{ secrets.aqi_forecast_api_key }}
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: |
          mkdir -p data
          python trainings/predict.py
          echo "✅ Forecast generated successfully"
          cat data/forecast_next_3_days.csv || echo "⚠️ No forecast CSV found!"

      # -------------------------
      # 10. Upload Artifacts
      # -------------------------
      - name: Upload Artifacts (models, logs, forecast)
        uses: actions/upload-artifact@v4
        with:
          name: aqi-artifacts
          path: |
            models/
            logs/
            data/forecast_next_3_days.csv
